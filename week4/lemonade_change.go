// 在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
// 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
// 注意，一开始你手头没有任何零钱。
// 给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回true，否则返回 alse。
//
// 输入：bills = [5,5,5,10,20]
// 输出：true
// 解释：
// 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
// 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
// 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
// 由于所有客户都得到了正确的找零，所以我们输出 true。
//
// 解题思路:
// 贪心算法：由于顾客只可能提供三种不同面值的钞票，而且一开始没有任何钞票，因此拥有的钞票面值只可能是 5 美元，10 美元和 20 美元三种。
// 基于此，可以进行分类讨论：
// 1. 5美元，由于柠檬水的价格也为 55 美元，因此可以直接收下即可
// 2. 10美元，需要找回 5 美元，如果没有 5 美元面值的钞票，则无法正确找零
// 3. 20美元，我们需要找回 15 美元，此时有两种组合方式:
// 一种是一张 10 美元和 5 美元的钞票。
// 一种是 3 张 5 美元的钞票，如果两种组合方式都没有，则无法正确找零。
// 当可以正确找零时，两种找零的方式中更倾向于第一种，即如果存在 5 美元和 10 美元，我们就按第一种方式找零，
// 否则按第二种方式找零，因为需要使用 5 美元的找零场景会比需要使用 10 美元的找零场景多，我们需要尽可能保留 5 美元的钞票
// 基于此，我们维护两个变量 five 和 ten 表示当前手中拥有的 5 美元和 10 美元钞票的张数，从前往后遍历数组分类讨论即可。
//
// 时间复杂度：O(N)， N是bills的长度
// 空间复杂度：O(1)


package main

func LemonadeChange(bills []int) bool {
	// 分别表示5美元和10美元的张数
	five, ten := 0, 0
	// 循环遍历bills
	for _, bill := range bills {
		// 分别按照不同面值的钱进行枚举判断
		if bill == 5 {
			five++
		} else if bill == 10 {
			if five == 0 {
				return false
			}
			five--
			ten++
		} else {
			if five > 0 && ten > 0 {
				five--
				ten--
			} else if five >= 3 {
				five -= 3
			} else {
				return false
			}
		}
	}
	return true
}
