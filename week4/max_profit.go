// 给定一个数组 prices ，其中prices[i] 是一支给定股票第 i 天的价格。
// 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
// 输入: prices = [7,1,5,3,6,4]
// 输出: 7
// 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。
// 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3。
//
// 解题思路:
// 遍历整个股票交易日价格列表 price，策略是所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）
// 1.计算 i-1 日买入与第 i 日卖出赚取的利润，即 prices[i] - prices[i - 1]
// 2.当该天利润 > 0，则将利润加入总利润 profit；当利润为 00 或为负，则直接跳过
// 3.遍历完成后，返回总利润 profit
//
// 时间复杂度:O(N) 只需一次遍历
// 空间复杂度:O(1)


package main

func MaxProfit(prices []int) (ans int) {
	for i := 1; i < len(prices); i++ {
		// 当该天利润 > 0，则将利润加入总利润 profit；当利润为 00 或为负，则直接跳过
		ans += max(0, prices[i]-prices[i-1])
	}
	return
}

// max 返回最大值
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}